{"version":3,"sources":["redux/reducers/index.js","redux/actions/index.js","redux/store/index.js","redux/effects/index.js","components/change-button/change-button-display.jsx","components/stats-display/stats-display-view.jsx","components/configurator/configator-view.jsx","components/configurator/configurator-container.jsx","components/cpu-monsters-generator/cpu-monsters-container.jsx","components/actionBox/action-box-display.jsx","components/game-instructions/game-instructions-display.jsx","components/actionBox/action-box-container.jsx","App.jsx","index.jsx"],"names":["initialState","gameMode","monsterConfig","name","monsterImg","lookVersion","level","attackPoints","defencePoints","lifePoints","levelUpPoints","cpuMonsterConfig","monsterReducer","state","action","type","payload","cpuMonsterReducer","middleware","applyMiddleware","thunk","store","createStore","composeWithDevTools","generateNewNameEffect","value","dispatch","fetch","then","res","json","myJSON","word","generateNewCpuName","catch","err","console","log","changeGameModeEffect","spendLevelUpPointsEffect","user","generateCpuMonsterStats","ChangeButtonDisplay","props","methood","text","dataFunc","disabled","$changeButton","onClick","data-func","StatsDisplay","staticValue","tempValue","$statsDisplay","Fragment","MonsterConfigDisplay","generateNewName","changeCounter","tempLevelUpPoints","tempAttackPoints","tempDefencePoints","tempLifePoints","addPoints","saveConfig","className","src","c","ConfiguratorContainer","event","target","tempCounter","counter","length","setState","changeLook","attr","getAttribute","spendLevelUpPoints","changeGameMode","this","prevProps","Component","connect","changeLookEffect","CpuMonsterGenerator","initCpuMonster","num","Math","floor","random","cpuLookVersion","generateMonsterStatistics","i","ActionBoxDisplay","round","attack","userAttackPoints","userTempDefencePoints","userTempLifePoints","cpuAttackPoints","cpuTempDefencePoints","cpuTempLifePoints","actionLog","map","el","GameInstructionsDisplay","instruction","levelUp","restart","ActionBox","startBrawl","userDefencePoints","userLifePoints","cpuDefencePoints","cpuLifePoints","endGame","min","max","playRound","currentPlayer","setCurrentPlayer","calcDamage","randomNumber","currentTurn","block","winingConditionChecker","damageDone","damageMath","blockChance","starting","currentWinner","winner","setTimeout","window","location","reload","attacker","damage","push","levelUpEffects","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c94a1b90.chunk.js","sourcesContent":["import {\r\n    GENERATE_NEW_USER_NAME,\r\n    GENERATE_NEW_CPU_NAME,\r\n    CHANGE_LOOK,\r\n    CHANGE_GAME_MODE,\r\n    SPEND_LEVEL_UP_POINTS,\r\n    GENERATE_CPU_MONSTER_STATS,\r\n    LEVEL_UP\r\n} from \"../actions/index\";\r\n\r\nconst initialState = {\r\n  gameMode: \"Pre-config\",\r\n  monsterConfig: {\r\n    name: \"Moonster\",\r\n    monsterImg: [\"monster1.png\", \"monster2.png\", \"monster3.png\", \"monster4.png\", \"monster5.png\", \"monster6.png\", \"monster7.png\"],\r\n    lookVersion: 0,\r\n    level: 1,\r\n    attackPoints: 5,\r\n    defencePoints: 5,\r\n    lifePoints: 20,\r\n    levelUpPoints: 5\r\n  },\r\n  cpuMonsterConfig: {\r\n      name: \"CPU\",\r\n      lookVersion: 0,\r\n      level: 1,\r\n      attackPoints: 0,\r\n      defencePoints: 0,\r\n      lifePoints: 0,\r\n      levelUpPoints: 5,\r\n  }\r\n};\r\n\r\nexport function mainReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GENERATE_NEW_USER_NAME:\r\n    case CHANGE_LOOK:\r\n    case SPEND_LEVEL_UP_POINTS:\r\n      case LEVEL_UP:  {\r\n      return {\r\n        ...state,\r\n          cpuMonsterConfig: cpuMonsterReducer(state.cpuMonsterConfig, action),\r\n          monsterConfig: monsterReducer(state.monsterConfig, action),\r\n      };\r\n    }\r\n    case GENERATE_NEW_CPU_NAME:\r\n      case GENERATE_CPU_MONSTER_STATS:\r\n        return {\r\n            ...state,\r\n            cpuMonsterConfig: cpuMonsterReducer(state.cpuMonsterConfig, action)\r\n        };\r\n    case CHANGE_GAME_MODE: {\r\n      return {\r\n        ...state,\r\n        gameMode: action.payload,\r\n        monsterConfig: monsterReducer(\r\n          state.monsterConfig,\r\n          SPEND_LEVEL_UP_POINTS\r\n        )\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function monsterReducer(state = initialState.monsterConfig, action) {\r\n  switch (action.type) {\r\n    case GENERATE_NEW_USER_NAME: {\r\n      return { ...state, name: action.payload };\r\n    }\r\n    case CHANGE_LOOK: {\r\n      return { ...state, lookVersion: action.payload };\r\n    }\r\n    case SPEND_LEVEL_UP_POINTS: {\r\n      return {\r\n        ...state,\r\n        levelUpPoints: action.payload.levelUpPoints,\r\n        attackPoints: action.payload.attackPoints,\r\n        defencePoints: action.payload.defencePoints,\r\n        lifePoints: action.payload.lifePoints\r\n      };\r\n    }\r\n      case LEVEL_UP: {\r\n        return {\r\n            ...state,\r\n            levelUpPoints: action.payload * state.level,\r\n            level: state.level + 1,\r\n        }\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function cpuMonsterReducer(state = initialState.cpuMonsterConfig, action){\r\n  switch (action.type) {\r\n    case GENERATE_NEW_CPU_NAME: {\r\n      return { ...state, name: action.payload };\r\n    }\r\n      case GENERATE_CPU_MONSTER_STATS: {\r\n          return {\r\n              ...state,\r\n              attackPoints: action.payload.attackPoints,\r\n              defencePoints: action.payload.defencePoints,\r\n              lifePoints: action.payload.lifePoints\r\n          };\r\n      }\r\n      case LEVEL_UP: {\r\n          return {\r\n              ...state,\r\n              levelUpPoints: action.payload * state.level,\r\n              level: state.level + 1,\r\n          }\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const GENERATE_NEW_USER_NAME = \"GENERATE_NEW_USER_NAME\";\r\nexport const GENERATE_NEW_CPU_NAME = \"GENERATE_NEW_CPU_NAME\";\r\nexport const CHANGE_LOOK = \"CHANGE_LOOK\";\r\nexport const CHANGE_GAME_MODE = \"CHANGE_GAME_MODE\";\r\nexport const SPEND_LEVEL_UP_POINTS = \"SPEND_LEVEL_UP_POINTS\";\r\nexport const GENERATE_CPU_MONSTER_STATS = \"GENERATE_CPU_MONSTER_STATS\";\r\nexport const LEVEL_UP = \"LEVEL_UP\";\r\n\r\nexport function generateNewUserName(payload) {\r\n  return {\r\n    type: \"GENERATE_NEW_USER_NAME\",\r\n    payload\r\n  };\r\n}\r\n\r\nexport function generateNewCpuName(payload) {\r\n    return {\r\n        type: \"GENERATE_NEW_CPU_NAME\",\r\n        payload\r\n    };\r\n}\r\n\r\nexport function changeLook(payload) {\r\n  return {\r\n    type: \"CHANGE_LOOK\",\r\n    payload\r\n  };\r\n}\r\n\r\nexport function changeGameMode(payload) {\r\n  return {\r\n    type: \"CHANGE_GAME_MODE\",\r\n    payload\r\n  };\r\n}\r\n\r\nexport function spendLevelUpPoints(payload) {\r\n  return {\r\n    type: \"SPEND_LEVEL_UP_POINTS\",\r\n    payload\r\n  };\r\n}\r\n\r\nexport function generateCpuMonsterStats(payload) {\r\n    return {\r\n        type: \"GENERATE_CPU_MONSTER_STATS\",\r\n        payload\r\n    };\r\n}\r\n\r\nexport function levelUp(payload) {\r\n    return {\r\n        type: \"LEVEL_UP\",\r\n        payload\r\n    };\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { mainReducer } from \"../reducers/index\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst middleware = applyMiddleware(thunk);\r\nconst store = createStore(mainReducer, composeWithDevTools(\r\n    middleware\r\n));\r\n\r\nexport default store;\r\n","import {\r\n    generateNewUserName,\r\n    generateNewCpuName,\r\n  changeLook,\r\n    changeGameMode,\r\n  spendLevelUpPoints,\r\n    generateCpuMonsterStats,\r\n    levelUp\r\n} from \"../actions/index\";\r\n\r\nexport const generateNewNameEffect = (value) => {\r\n  return dispatch => {\r\n    fetch(\"https://api.wordnik.com/v4/words.json/randomWord?api_key=5tlss5fk37wzhgjb0yemzcskbgz2wjab501uv0s5kdvano1xa\")\r\n      .then(res => res.json())\r\n      .then(myJSON => {\r\n        if (value === \"user\") {\r\n            dispatch(generateNewUserName(myJSON.word))\r\n        } else {\r\n            dispatch(generateNewCpuName(myJSON.word))\r\n        }\r\n\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n};\r\n\r\nexport const changeLookEffect = value => {\r\n  return dispatch => {\r\n    dispatch(changeLook([value]));\r\n  };\r\n};\r\n\r\nexport const changeGameModeEffect = (value) => {\r\n  return dispatch => {\r\n    dispatch(changeGameMode(value));\r\n  };\r\n};\r\n\r\nexport const spendLevelUpPointsEffect = value => {\r\n  return dispatch => {\r\n\r\n    if (value.user === \"user\") {\r\n        dispatch(spendLevelUpPoints(value));\r\n    } else {\r\n        dispatch(generateCpuMonsterStats(value));\r\n    }\r\n\r\n  };\r\n};\r\n\r\nexport const levelUpEffects = (value) => {\r\n    return dispatch => {\r\n        dispatch(levelUp(value));\r\n    };\r\n};\r\n","import React from 'react';\r\n\r\nconst ChangeButtonDisplay = (props) => {\r\n    const { gameMode, name, methood, text, dataFunc, disabled } = props;\r\n    const $changeButton =\r\n        gameMode === \"Pre-config\" ? (\r\n            <button name={name} onClick={methood} data-func={dataFunc} disabled={disabled}>\r\n                {text}\r\n            </button>\r\n        ) : (\r\n            \"\"\r\n        );\r\n\r\n    return (\r\n        <div>\r\n            {$changeButton}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ChangeButtonDisplay;\r\n","import React from 'react';\r\n\r\nconst StatsDisplay = (props) => {\r\n    const { gameMode, name, staticValue, tempValue } = props;\r\n    const $statsDisplay =\r\n        gameMode === \"Pre-config\" ? (\r\n            <p>{name}: {staticValue + tempValue}</p>\r\n        ) : (\r\n            <p>{name}: {staticValue}</p>\r\n        );\r\n    return (\r\n        <React.Fragment>{$statsDisplay}</React.Fragment>\r\n    )\r\n};\r\n\r\nexport default StatsDisplay;\r\n","import React from \"react\";\r\nimport ChangeButtonDisplay from \"../change-button/change-button-display\";\r\nimport StatsDisplay from \"../stats-display/stats-display-view\";\r\nimport \"../../css/config.css\";\r\n\r\nconst MonsterConfigDisplay = props => {\r\n  const {\r\n    gameMode,\r\n    name,\r\n    generateNewName,\r\n    changeCounter,\r\n    monsterImg,\r\n    lookVersion,\r\n    level,\r\n    tempLevelUpPoints,\r\n    attackPoints,\r\n    tempAttackPoints,\r\n    defencePoints,\r\n    tempDefencePoints,\r\n    lifePoints,\r\n    tempLifePoints,\r\n    addPoints,\r\n    saveConfig,\r\n      disabled\r\n  } = props;\r\n  return (\r\n    <div className=\"monsterConfig\">\r\n        <h2>Monster name: <br /><span className=\"name\">{name}</span></h2>\r\n      <ChangeButtonDisplay\r\n        gameMode={gameMode}\r\n        methood={generateNewName}\r\n        name={\"generateNewName\"}\r\n        text={\"Generate new name\"}\r\n      />\r\n      <div className=\"look\">\r\n        <ChangeButtonDisplay\r\n          gameMode={gameMode}\r\n          methood={changeCounter}\r\n          name={\"prev\"}\r\n          text={\"<\"}\r\n        />\r\n        <img src={\"./img/\" + monsterImg[lookVersion]} className=\"look\" />\r\n        <ChangeButtonDisplay\r\n          gameMode={gameMode}\r\n          methood={changeCounter}\r\n          name={\"next\"}\r\n          text={\">\"}\r\n        />\r\n      </div>\r\n      <StatsDisplay\r\n        gameMode={gameMode}\r\n        name={\"Level\"}\r\n        staticValue={level}\r\n        tempValue={0}\r\n      />\r\n      {gameMode === \"Pre-config\" ? (\r\n        <StatsDisplay\r\n          gameMode={gameMode}\r\n          name={\"Points to spend\"}\r\n          staticValue={0}\r\n          tempValue={tempLevelUpPoints}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <div className=\"stats\">\r\n        <ChangeButtonDisplay\r\n          gameMode={gameMode}\r\n          methood={addPoints}\r\n          name={\"removeAttackPoints\"}\r\n          text={\"-\"}\r\n          c={\"remove\"}\r\n          dataFunc={\"remove\"}\r\n        />\r\n        <StatsDisplay\r\n          gameMode={gameMode}\r\n          name={\"Attack\"}\r\n          staticValue={attackPoints}\r\n          tempValue={tempAttackPoints}\r\n        />\r\n        <ChangeButtonDisplay\r\n          gameMode={gameMode}\r\n          methood={addPoints}\r\n          name={\"addAttackPoints\"}\r\n          text={\"+\"}\r\n          c={\"add\"}\r\n          dataFunc={\"add\"}\r\n        />\r\n      </div>\r\n      <div className=\"stats\">\r\n        <ChangeButtonDisplay\r\n          gameMode={gameMode}\r\n          methood={addPoints}\r\n          name={\"removeDefencePoints\"}\r\n          text={\"-\"}\r\n          c={\"remove\"}\r\n          dataFunc={\"remove\"}\r\n        />\r\n        <StatsDisplay\r\n          gameMode={gameMode}\r\n          name={\"Defence\"}\r\n          staticValue={defencePoints}\r\n          tempValue={tempDefencePoints}\r\n        />\r\n        <ChangeButtonDisplay\r\n          gameMode={gameMode}\r\n          methood={addPoints}\r\n          name={\"addDefencePoints\"}\r\n          text={\"+\"}\r\n          c={\"add\"}\r\n          dataFunc={\"add\"}\r\n        />\r\n      </div>\r\n      <div className=\"stats\">\r\n        <ChangeButtonDisplay\r\n          gameMode={gameMode}\r\n          methood={addPoints}\r\n          name={\"removeLifePoints\"}\r\n          text={\"-\"}\r\n          c={\"remove\"}\r\n          dataFunc={\"remove\"}\r\n        />\r\n        <StatsDisplay\r\n          gameMode={gameMode}\r\n          name={\"Life points\"}\r\n          staticValue={lifePoints}\r\n          tempValue={tempLifePoints}\r\n        />\r\n        <ChangeButtonDisplay\r\n          gameMode={gameMode}\r\n          methood={addPoints}\r\n          name={\"addLifePoints\"}\r\n          text={\"+\"}\r\n          c={\"add\"}\r\n          dataFunc={\"add\"}\r\n        />\r\n      </div>\r\n      <ChangeButtonDisplay\r\n        gameMode={gameMode}\r\n        methood={saveConfig}\r\n        name={\"saveConfig\"}\r\n        text={\"Save config\"}\r\n        disabled={disabled}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonsterConfigDisplay;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  generateNewNameEffect,\r\n  changeLookEffect,\r\n  changeGameModeEffect,\r\n  spendLevelUpPointsEffect\r\n} from \"../../redux/effects/index\";\r\nimport MonsterConfigDisplay from \"./configator-view\";\r\n\r\nclass ConfiguratorContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        counter: 0,\r\n        tempAttackPoints: 0,\r\n        tempDefencePoints: 0,\r\n        tempLifePoints: 0,\r\n        tempLevelUpPoints: 0\r\n    };\r\n  }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            tempLevelUpPoints: this.props.levelUpPoints\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n      if (this.props.levelUpPoints != prevProps.levelUpPoints) {\r\n          this.setState({\r\n              tempLevelUpPoints: this.props.levelUpPoints\r\n          })\r\n      }\r\n    }\r\n\r\n  changeCounter = event => {\r\n    let name = event.target.name;\r\n    let tempCounter = this.state.counter;\r\n\r\n    if (name === \"next\") {\r\n      tempCounter++;\r\n    } else {\r\n      tempCounter--;\r\n    }\r\n\r\n    if (tempCounter === this.props.monsterImg.length) {\r\n      tempCounter = 0;\r\n    } else if (tempCounter < 0) {\r\n      tempCounter = this.props.monsterImg.length - 1;\r\n    }\r\n    this.setState({\r\n      counter: tempCounter\r\n    });\r\n    this.props.changeLook(tempCounter);\r\n  };\r\n\r\n  addPoints = event => {\r\n      let name = event.target.name;\r\n      let attr = event.target.getAttribute('data-func');\r\n      let {levelUpPoints, attackPoints, defencePoints, lifePoints } = this.props;\r\n      let {tempAttackPoints, tempDefencePoints, tempLifePoints, tempLevelUpPoints} = this.state;\r\n\r\n      if (attr === \"remove\") {\r\n          if (tempLevelUpPoints < levelUpPoints) {\r\n              switch (name) {\r\n                  case \"removeAttackPoints\": {\r\n                      if (tempAttackPoints + attackPoints > attackPoints ) {\r\n                          tempAttackPoints--;\r\n                          tempLevelUpPoints++;\r\n                      }\r\n                      break;\r\n                  }\r\n                  case \"removeDefencePoints\": {\r\n                      if (tempDefencePoints + defencePoints > defencePoints ) {\r\n                          tempDefencePoints--;\r\n                          tempLevelUpPoints++;\r\n                      }\r\n                      break;\r\n                  }\r\n                  case \"removeLifePoints\": {\r\n                      if (tempLifePoints + lifePoints > lifePoints ) {\r\n                          tempLifePoints--;\r\n                          tempLevelUpPoints++;\r\n                      }\r\n                      break;\r\n                  }\r\n                  default: {\r\n                      break;\r\n                  }\r\n              }\r\n          }\r\n      } else {\r\n          if (tempLevelUpPoints !== 0) {\r\n              switch (name) {\r\n                  case \"addAttackPoints\": {\r\n                      tempAttackPoints++;\r\n                      break;\r\n                  }\r\n                  case \"addDefencePoints\": {\r\n                      tempDefencePoints++;\r\n                      break;\r\n                  }\r\n                  case \"addLifePoints\": {\r\n                      tempLifePoints++;\r\n                      break;\r\n                  }\r\n                  default: {\r\n                      break;\r\n                  }\r\n              }\r\n              tempLevelUpPoints--;\r\n          }\r\n      }\r\n\r\n    this.setState({\r\n          tempAttackPoints,\r\n          tempDefencePoints,\r\n          tempLifePoints,\r\n          tempLevelUpPoints\r\n    });\r\n  };\r\n\r\n    saveConfig = () => {\r\n      let {levelUpPoints, attackPoints, defencePoints, lifePoints } = this.props;\r\n      let {tempAttackPoints, tempDefencePoints, tempLifePoints, tempLevelUpPoints} = this.state;\r\n      attackPoints = attackPoints + tempAttackPoints;\r\n      levelUpPoints = tempLevelUpPoints;\r\n      defencePoints = defencePoints + tempDefencePoints;\r\n      lifePoints = lifePoints + tempLifePoints;\r\n      this.props.spendLevelUpPoints({user: \"user\", attackPoints, levelUpPoints, defencePoints, lifePoints});\r\n      this.props.changeGameMode(\"preFight\")\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      generateNewName,\r\n      gameMode,\r\n      name,\r\n      lookVersion,\r\n      monsterImg,\r\n      level,\r\n      attackPoints,\r\n      defencePoints,\r\n      lifePoints\r\n    } = this.props;\r\n      const { tempAttackPoints, tempDefencePoints, tempLifePoints, tempLevelUpPoints } = this.state;\r\n\r\n      let disabled = tempLevelUpPoints !== 0 ? true : false;\r\n\r\n    return (\r\n      <div className=\"config\">\r\n          <MonsterConfigDisplay gameMode={gameMode} name={name} generateNewName={generateNewName}\r\n                                changeCounter={this.changeCounter} monsterImg={monsterImg} lookVersion={lookVersion}\r\n                                level={level} tempLevelUpPoints={tempLevelUpPoints}\r\n                                attackPoints={attackPoints} tempAttackPoints={tempAttackPoints}\r\n                                defencePoints={defencePoints} tempDefencePoints={tempDefencePoints}\r\n                                lifePoints={lifePoints} tempLifePoints={tempLifePoints}\r\n                                addPoints={this.addPoints} saveConfig={this.saveConfig} disabled={disabled}\r\n          />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst select = state => {\r\n  return {\r\n    gameMode: state.gameMode,\r\n    name: state.monsterConfig.name,\r\n    monsterImg: state.monsterConfig.monsterImg,\r\n    lookVersion: state.monsterConfig.lookVersion,\r\n    level: state.monsterConfig.level,\r\n    attackPoints: state.monsterConfig.attackPoints,\r\n    defencePoints: state.monsterConfig.defencePoints,\r\n    lifePoints: state.monsterConfig.lifePoints,\r\n    levelUpPoints: state.monsterConfig.levelUpPoints\r\n  };\r\n};\r\n\r\nconst mapDisptachToProps = dispatch => {\r\n  return {\r\n    generateNewName: () => {\r\n        dispatch(generateNewNameEffect('user'));\r\n    },\r\n    changeLook: value => {\r\n        dispatch(changeLookEffect(value));\r\n    },\r\n      changeGameMode: value => {\r\n          dispatch(changeGameModeEffect(value));\r\n    },\r\n    spendLevelUpPoints: value => {\r\n        dispatch(spendLevelUpPointsEffect(value));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(select, mapDisptachToProps)(ConfiguratorContainer);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport MonsterConfigDisplay from \"../configurator/configator-view\";\r\nimport {generateNewNameEffect, spendLevelUpPointsEffect} from \"../../redux/effects\";\r\n\r\nclass CpuMonsterGenerator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cpuLookVersion: 0,\r\n        tempAttackPoints: 0,\r\n        tempDefencePoints: 0,\r\n        tempLifePoints: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n      this.initCpuMonster();\r\n      let {attackPoints, defencePoints, lifePoints} = this.props;\r\n\r\n      for (let i = 0; i < 30; i++) {\r\n          let random = Math.floor(Math.random() * (2 + 1));\r\n          switch (random) {\r\n              case 0 :\r\n                  attackPoints++;\r\n                  break;\r\n              case 1 :\r\n                  defencePoints++;\r\n                  break;\r\n              case 2 :\r\n                  lifePoints++;\r\n                  break;\r\n              default:\r\n                  break;\r\n          }\r\n      }\r\n      this.props.spendLevelUpPoints({attackPoints, defencePoints, lifePoints});\r\n  }\r\n\r\n    componentDidUpdate (prevProps) {\r\n        if (this.props.gameMode != prevProps.gameMode && this.props.gameMode === \"preFight\") {\r\n            this.initCpuMonster();\r\n            this.generateMonsterStatistics();\r\n        }\r\n    }\r\n\r\n  initCpuMonster = () => {\r\n      let num = Math.floor(Math.random() * (6+ 1));\r\n      this.setState({\r\n          ...this.state,\r\n          cpuLookVersion: num\r\n      });\r\n      this.props.generateNewName();\r\n  };\r\n\r\n  generateMonsterStatistics = () => {\r\n      let {levelUpPoints, attackPoints, defencePoints, lifePoints} = this.props;\r\n      let {tempAttackPoints, tempDefencePoints, tempLifePoints} = this.state;\r\n\r\n      for (let i = 0; i < levelUpPoints; i++) {\r\n          let random = Math.floor(Math.random() * (2 + 1));\r\n\r\n          switch (random) {\r\n              case 0 :\r\n                  tempAttackPoints++;\r\n                  break;\r\n              case 1 :\r\n                  tempDefencePoints++;\r\n                  break;\r\n              case 2 :\r\n                  tempLifePoints++;\r\n                  break;\r\n              default:\r\n                  break;\r\n          }\r\n\r\n          this.setState({\r\n              tempAttackPoints,\r\n              tempDefencePoints,\r\n              tempLifePoints,\r\n          });\r\n      }\r\n\r\n      attackPoints = attackPoints + tempAttackPoints;\r\n      defencePoints = defencePoints + tempDefencePoints;\r\n      lifePoints = lifePoints + tempLifePoints;\r\n\r\n      this.props.spendLevelUpPoints({attackPoints, defencePoints, lifePoints});\r\n  };\r\n\r\n  render() {\r\n    const { gameMode, monsterImg, level, name, attackPoints, defencePoints, lifePoints} = this.props;\r\n    const { cpuLookVersion } = this.state;\r\n\r\n    if (gameMode !== \"Pre-config\") {\r\n        return (\r\n            <div className=\"config\">\r\n                <MonsterConfigDisplay\r\n                    monsterImg={monsterImg}\r\n                    lookVersion={cpuLookVersion}\r\n                    level={level}\r\n                    name={name}\r\n                    attackPoints={attackPoints}\r\n                    defencePoints={defencePoints}\r\n                    lifePoints={lifePoints}\r\n                />\r\n            </div>\r\n        );\r\n    } else {\r\n        return null\r\n    }\r\n  }\r\n}\r\n\r\nconst select = state => {\r\n  return {\r\n    gameMode: state.gameMode,\r\n    level: state.cpuMonsterConfig.level,\r\n    monsterImg: state.monsterConfig.monsterImg,\r\n      name: state.cpuMonsterConfig.name,\r\n      attackPoints: state.cpuMonsterConfig.attackPoints,\r\n      defencePoints: state.cpuMonsterConfig.defencePoints,\r\n      lifePoints: state.cpuMonsterConfig.lifePoints,\r\n      levelUpPoints: state.cpuMonsterConfig.levelUpPoints,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n      generateNewName: () => {\r\n          dispatch(generateNewNameEffect('CPU'));\r\n      },\r\n      spendLevelUpPoints: value => {\r\n          dispatch(spendLevelUpPointsEffect(value));\r\n      }\r\n  }\r\n};\r\n\r\nexport default connect(select, mapDispatchToProps)(CpuMonsterGenerator);\r\n","import React from \"react\";\r\n\r\nconst ActionBoxDisplay = props => {\r\n  const {\r\n      round,\r\n      attack,\r\n      userAttackPoints,\r\n      userTempDefencePoints,\r\n      userTempLifePoints,\r\n      cpuAttackPoints,\r\n      cpuTempDefencePoints,\r\n      cpuTempLifePoints,\r\n      actionLog\r\n  } = props;\r\n\r\n  return (\r\n      <div className=\"actionBox\">\r\n          <h3>{round === 0 ? \"Start the fight\" : \"Round: \" + round}</h3>\r\n          <button className=\"btn-lg\" onClick={attack}>Play next round</button>\r\n          <div className=\"row display-stats\">\r\n              <div className=\"col-md-6\">\r\n                  <p>Player</p>\r\n                  <p>Attack: {userAttackPoints}</p>\r\n                  <p>Defence: {userTempDefencePoints}</p>\r\n                  <p>Life: {userTempLifePoints}</p>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                  <p>CPU</p>\r\n                  <p>Attack: {cpuAttackPoints}</p>\r\n                  <p>Defence: {cpuTempDefencePoints}</p>\r\n                  <p>Life: {cpuTempLifePoints}</p>\r\n              </div>\r\n          </div>\r\n          <div className=\"action-log\">\r\n              {actionLog.map(el => <p>{el}</p>)}\r\n          </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default ActionBoxDisplay;\r\n","import React from 'react';\r\n\r\nconst GameInstructionsDisplay = props => {\r\n\r\n    const {\r\n        gameMode,\r\n        instruction,\r\n        levelUp,\r\n        restart\r\n    } = props;\r\n\r\n    return (\r\n        <div className=\"gameInstructionsBox\">\r\n            <h1>{instruction}</h1>\r\n            {gameMode === \"Pre-config\" ? (\r\n                <>\r\n                    <p>Stats info:</p>\r\n                    <p><b>Attack points</b> are responsible for the amount of damage a monster can inflict. Damage can be in range - from Attack points multiplied by 1 to Attack points multiplied by 1.4. In example: if your Attack is equal 10, than possible damage will be from range: 10 (10x1) to 14 (10x1.4).</p>\r\n                    <p><b>Defence points</b> determine the chance of blocking the attack. The chance is calc based on percentage calculation: (damage to be done by the opponent divided by Defence points) divided by 1.4. In example: if your Defence is equal 5 and your opponent is attacking for 10 points of damage, thank you've got 35% chance to block the damage (becasue: (5 / 10) / 1.4 = 0.35).</p>\r\n                    <p><b>Life points</b> determine how much damage you can take. The player which life points gets to 0 or less, losses the brawl.</p>\r\n                </> )\r\n                : \"\" }\r\n            {gameMode === \"Level-up\" ? <button className=\"btn-lg\" onClick={levelUp}>Level Up</button> : \"\"}\r\n            {gameMode === \"End-game\" ? <button className=\"btn-lg\" onClick={restart}>Restart</button> : \"\"}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default GameInstructionsDisplay;\r\n\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ActionBoxDisplay from \"./action-box-display\";\r\nimport GameInstructionsDisplay from \"../game-instructions/game-instructions-display\";\r\nimport {changeGameModeEffect, levelUpEffects} from \"../../redux/effects\";\r\n\r\nclass ActionBox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      round: 0,\r\n      attack: 0,\r\n      currentTurn: [\"player\", \"cpu\"],\r\n      userTempDefencePoints: 0,\r\n      userTempLifePoints: 0,\r\n      cpuTempDefencePoints: 0,\r\n      cpuTempLifePoints: 0,\r\n        block: false,\r\n      actionLog: [],\r\n      endGame: false\r\n    };\r\n  }\r\n\r\n  componentDidUpdate (prevProps) {\r\n      if (this.props.gameMode != prevProps.gameMode) {\r\n          this.setState({\r\n              actionLog: []\r\n          });\r\n          if (this.props.gameMode === \"preFight\") {\r\n              setTimeout(()=>{\r\n                  this.startBrawl()\r\n              }, 10)\r\n          }\r\n      }\r\n  }\r\n\r\n    startBrawl = () => {\r\n        const {\r\n            userDefencePoints,\r\n            userLifePoints,\r\n            cpuDefencePoints,\r\n            cpuLifePoints\r\n        } = this.props;\r\n        this.setState({\r\n            endGame: false,\r\n            userTempDefencePoints: userDefencePoints,\r\n            userTempLifePoints: userLifePoints,\r\n            cpuTempDefencePoints: cpuDefencePoints,\r\n            cpuTempLifePoints: cpuLifePoints,\r\n            round: 0\r\n        });\r\n    };\r\n\r\n  random = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  playRound = () => {\r\n      let {round, endGame} = this.state;\r\n      if (!endGame) {\r\n\r\n              let currentPlayer = this.setCurrentPlayer();\r\n              let calcDamage = this.calcDamage(currentPlayer);\r\n              round++;\r\n\r\n              this.setState({\r\n                  attack: calcDamage.randomNumber,\r\n                  round: round,\r\n                  cpuTempLifePoints: calcDamage.cpuTempLifePoints,\r\n                  cpuTempDefencePoints: calcDamage.cpuTempDefencePoints,\r\n                  userTempLifePoints: calcDamage.userTempLifePoints,\r\n                  userTempDefencePoints: calcDamage.userTempDefencePoints,\r\n                  currentTurn: currentPlayer,\r\n                  block: calcDamage.block\r\n              }, () => {\r\n                  this.actionLog(this.state.currentTurn, this.state.attack, this.state.round);\r\n                  this.winingConditionChecker()\r\n              });\r\n\r\n      }\r\n  };\r\n\r\n    calcDamage = (currentPlayer) => {\r\n        const {userAttackPoints, cpuAttackPoints} = this.props;\r\n        let {cpuTempLifePoints, cpuTempDefencePoints, userTempLifePoints, userTempDefencePoints, block } = this.state;\r\n\r\n        let randomNumber;\r\n        let damageDone;\r\n\r\n        if (currentPlayer === \"player\") {\r\n            randomNumber = this.random(userAttackPoints / 1, userAttackPoints * 1.4);\r\n            damageDone = this.damageMath(randomNumber, cpuTempDefencePoints, cpuTempLifePoints);\r\n            cpuTempDefencePoints = damageDone.userTempDefencePoints ;\r\n            cpuTempLifePoints = damageDone.userTempLifePoints;\r\n        } else {\r\n            randomNumber = this.random(cpuAttackPoints / 1, cpuAttackPoints * 1.4);\r\n            damageDone = this.damageMath(randomNumber, userTempDefencePoints, userTempLifePoints);\r\n            userTempLifePoints = damageDone.userTempLifePoints;\r\n            userTempDefencePoints = damageDone.userTempDefencePoints;\r\n        }\r\n\r\n        block = damageDone.block;\r\n\r\n        return { randomNumber, cpuTempDefencePoints, cpuTempLifePoints, userTempLifePoints, userTempDefencePoints, block }\r\n    };\r\n\r\n    damageMath = (randomNumber, userTempDefencePoints, userTempLifePoints) => {\r\n\r\n        let blockChance = (userTempDefencePoints / randomNumber) / 1.4;\r\n        let random = Math.random();\r\n\r\n        if (random > blockChance) {\r\n            return {\r\n                userTempLifePoints : userTempLifePoints - randomNumber,\r\n                userTempDefencePoints : userTempDefencePoints,\r\n                block: false\r\n            }\r\n        } else {\r\n            return  { userTempDefencePoints : userTempDefencePoints, userTempLifePoints : userTempLifePoints, block: true }\r\n        }\r\n    };\r\n\r\n  setCurrentPlayer = () => {\r\n      let {round, currentTurn } = this.state;\r\n      let starting = this.random(2, -1);\r\n      let currentPlayer = '';\r\n\r\n      if (round === 0) {\r\n          currentPlayer = currentTurn[starting];\r\n      } else {\r\n          if (currentTurn === \"player\") {\r\n              currentPlayer = \"cpu\"\r\n          } else {\r\n              currentPlayer = \"player\"\r\n          }\r\n      }\r\n      return currentPlayer\r\n  };\r\n\r\n  winingConditionChecker = () => {\r\n      let { cpuTempLifePoints, userTempLifePoints } = this.state;\r\n      let currentWinner;\r\n\r\n      if (cpuTempLifePoints <= 0 || userTempLifePoints <= 0) {\r\n\r\n          if (cpuTempLifePoints <= 0) {\r\n              currentWinner = \"Player\";\r\n          } else {\r\n              currentWinner = \"CPU\";\r\n          }\r\n\r\n          this.setState({\r\n              endGame: true,\r\n              winner: currentWinner,\r\n              round: 0,\r\n              attack: 0,\r\n              currentTurn: [\"player\", \"cpu\"],\r\n          }, ()=> {\r\n              this.actionLog();\r\n              setTimeout(()=>{\r\n                  if (currentWinner === \"Player\") {\r\n                      this.props.changeGameMode(\"Level-up\")\r\n                  } else {\r\n                      this.props.changeGameMode(\"End-game\")\r\n                  }\r\n              }, 3000)\r\n          });\r\n      }\r\n  };\r\n\r\n  levelUp = () => {\r\n      this.props.levelUp(3);\r\n      this.props.changeGameMode(\"Pre-config\")\r\n  };\r\n\r\n  restart = () => {\r\n      window.location.reload();\r\n  };\r\n\r\n  actionLog = (attacker, damage, round) => {\r\n      let { actionLog, endGame, winner, block } = this.state;\r\n\r\n      if (endGame) {\r\n          actionLog.push(`End game, ${winner} wins!`);\r\n      } else {\r\n          actionLog.push(`Round ${round}: ${attacker} attacks for ${damage} ${block ? \" - but it was blocked!\" : \"\"}`);\r\n      }\r\n\r\n      this.setState({\r\n          actionLog: actionLog\r\n      })\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      round,\r\n      userTempDefencePoints,\r\n      userTempLifePoints,\r\n      cpuTempDefencePoints,\r\n      cpuTempLifePoints,\r\n        actionLog\r\n    } = this.state;\r\n    const { gameMode, userAttackPoints, cpuAttackPoints } = this.props;\r\n\r\n    let instruction;\r\n\r\n    if (gameMode === \"Pre-config\") {\r\n      instruction = \"Please configure your Monster\";\r\n       return (\r\n      <GameInstructionsDisplay gameMode={gameMode}\r\n                               instruction={instruction} />\r\n       )\r\n    } else if (gameMode === \"preFight\") {\r\n      instruction = \"Brawl has started... Fight to survive!\";\r\n        return (\r\n            <>\r\n                <GameInstructionsDisplay gameMode={gameMode}\r\n                                         instruction={instruction}/>\r\n                <ActionBoxDisplay\r\n                    round={round}\r\n                    attack={this.playRound}\r\n                    userAttackPoints={userAttackPoints}\r\n                    userTempDefencePoints={userTempDefencePoints}\r\n                    userTempLifePoints={userTempLifePoints}\r\n                    cpuAttackPoints={cpuAttackPoints}\r\n                    cpuTempDefencePoints={cpuTempDefencePoints}\r\n                    cpuTempLifePoints={cpuTempLifePoints}\r\n                    actionLog={actionLog}\r\n                />\r\n            </>\r\n        );\r\n    } else if (gameMode === \"Level-up\") {\r\n        instruction = \"You have win and level up\";\r\n        return (\r\n            <>\r\n                <GameInstructionsDisplay gameMode={gameMode}\r\n                                         instruction={instruction}\r\n                                         levelUp={this.levelUp}/>\r\n            </>\r\n        )\r\n    } else if (gameMode === \"End-game\") {\r\n        instruction = \"You have lost... want to play again?\";\r\n        return (\r\n            <>\r\n                <GameInstructionsDisplay gameMode={gameMode}\r\n                                         instruction={instruction}\r\n                                         restart={this.restart}/>\r\n            </>\r\n        )\r\n    }\r\n  }\r\n}\r\n\r\nconst select = state => {\r\n  return {\r\n    gameMode: state.gameMode,\r\n    userAttackPoints: state.monsterConfig.attackPoints,\r\n    userDefencePoints: state.monsterConfig.defencePoints,\r\n    userLifePoints: state.monsterConfig.lifePoints,\r\n    cpuAttackPoints: state.cpuMonsterConfig.attackPoints,\r\n    cpuDefencePoints: state.cpuMonsterConfig.defencePoints,\r\n    cpuLifePoints: state.cpuMonsterConfig.lifePoints\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeGameMode: value => {\r\n            dispatch(changeGameModeEffect(value));\r\n        },\r\n        levelUp: value => {\r\n            dispatch(levelUpEffects(value));\r\n        },\r\n    }\r\n};\r\n\r\nexport default connect(select, mapDispatchToProps)(ActionBox);\r\n","import React, { Component } from \"react\";\r\nimport MonsterConfigurator from \"./components/configurator/configurator-container\";\r\nimport CpuMonsterGenerator from \"./components/cpu-monsters-generator/cpu-monsters-container\";\r\nimport \"./css/App.css\";\r\nimport ActionBox from \"./components/actionBox/action-box-container\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-12 col-lg-4\">\r\n              <MonsterConfigurator />\r\n            </div>\r\n            <div className=\"col-sm-12 col-md-12 col-lg-4\">\r\n              <ActionBox />\r\n            </div>\r\n            <div className=\"col-sm-12 col-md-12 col-lg-4\">\r\n              <CpuMonsterGenerator />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store/index\";\r\n\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}